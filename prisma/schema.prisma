// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CoverageDistrict {
  id       String @id @default(uuid())
  district String @unique

  CoverageUpazillaOrThana CoverageUpazillaOrThana[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("coverage_districts")
}

model CoverageUpazillaOrThana {
  id String @id @default(uuid())

  upazillaOrThana String @unique

  districtId String
  district   CoverageDistrict @relation(fields: [districtId], references: [id])

  coverageArea CoverageArea[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("coverage_upazilla_or_thanas")
}

model CoverageArea {
  id String @id @default(uuid())

  upazillaOrThanaId String
  upazillaOrThana   CoverageUpazillaOrThana @relation(fields: [upazillaOrThanaId], references: [id])

  area String

  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  Customer  Customer[]

  @@map("coverage_areas")
}

model StreamingService {
  id       String  @id @default(uuid())
  service  String @unique
  photoURL String? @unique

  StreamingServicesForPackage StreamingServicesForPackage[]

  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime?                      @updatedAt
  StreamingServicesForCustomer StreamingServicesForCustomer[]

  @@map("streaming_services")
}

model Package {
  id                   String @id @default(uuid())
  speed                Int
  fee                  Int
  noOfPublicIP         Int    @default(0)
  talkTime             Int    @default(0)
  OTCFee               Int
  noOfStreamingService Int    @default(0)

  StreamingServicesForPackage StreamingServicesForPackage[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Customer  Customer[]

  @@map("packages")
}

model StreamingServicesForPackage {
  id String @id @default(uuid())

  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  streamingServiceId String
  streamingService   StreamingService @relation(fields: [streamingServiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("streaming_service_for_packages")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      UserRoles @default(user)
  contactNo String    @unique
  address   String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Customer  Customer[]

  @@map("users")
}

model Customer {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  coverageAreaId String
  coverageArea   CoverageArea @relation(fields: [coverageAreaId], references: [id])

  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  StreamingServicesForCustomer StreamingServicesForCustomer[]

  @@map("customers")
}

model StreamingServicesForCustomer {
  id String @id @default(uuid())

  streamingServiceId String
  streamingService   StreamingService @relation(fields: [streamingServiceId], references: [id])

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("streaming_service_for_customers")
}

enum UserRoles {
  super_admin
  admin
  customer
  user
}
